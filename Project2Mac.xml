<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>int grid[6][6];
bool gameCreated = false;
bool playersCreated = false;
int vehicles = 0;

</declaration><template><name x="5" y="5">Game</name><declaration>void initialize()
{
	int i = 0;
	int j = 0;
	for(i; i &lt; 6; i++)
		for(j; j &lt; 6; j++)
			grid[i][j] = 0;

	gameCreated = true;
}</declaration><location id="id0" x="128" y="-40"></location><location id="id1" x="16" y="-40"></location><init ref="id1"/><transition><source ref="id1"/><target ref="id0"/><label kind="assignment" x="40" y="-64">initialize()</label></transition></template><template><name>Vehicle</name><parameter>int x, int y, int dir, int leng</parameter><declaration>void moveUp()
{
	if((y+leng &lt; 6) &amp;&amp; (grid[x][y+leng] == 0))
	{

		int tempY = y+1;
		grid[x][y+leng] = 1;
		grid[x][y] = 0;
		y = tempY;

	}
}

void moveDown()
{
	if((y-1 &gt;= 0) &amp;&amp; (grid[x][y-1] == 0))
	{
		int tempY = y-1;
		grid[x][y-1] = 1;
		grid[x][tempY+leng] = 0;
		y = tempY;
	}
}

void moveLeft()
{
	if((x-1 &gt;= 0) &amp;&amp; (grid[x-1][y] == 0))
	{
		int tempX = x-1;
		grid[x-1][y] = 1;
		grid[tempX+leng][y] = 0;
		x = tempX;
	}
}

void moveRight()
{
	if((x+leng &lt; 6) &amp;&amp; (grid[x+leng][y] == 0))
	{
		int tempX = x+1;
		grid[x+leng][y] = 1;
		grid[x][y] = 0;
		x = tempX;
	}
}

void create()
{
	int tempLeng = leng;
	grid[x][y] = 1;
	if(dir == 0)
	{
		int tempY = y;
		for(tempLeng; tempLeng &gt; 1; tempLeng--)
		{
			tempY = tempY+1;
			grid[x][tempY] = 1;
		}
	}
	else if(dir == 1)
	{
		int tempX = x;
		for(tempLeng; tempLeng &gt; 1; tempLeng--)
		{
			tempX = tempX+1;
			grid[tempX][y] = 1;
		}
	}

	vehicles = vehicles+1;
	if(vehicles == 6)
		playersCreated = true;
}</declaration><location id="id2" x="-88" y="0"></location><location id="id3" x="216" y="0"></location><location id="id4" x="88" y="0"></location><location id="id5" x="-176" y="0"></location><location id="id6" x="-352" y="0"></location><init ref="id6"/><transition><source ref="id2"/><target ref="id4"/><label kind="guard" x="-72" y="-24">playersCreated == true</label></transition><transition><source ref="id5"/><target ref="id2"/><label kind="assignment" x="-152" y="-24">create()</label></transition><transition><source ref="id3"/><target ref="id4"/><nail x="216" y="-160"/><nail x="64" y="-160"/><nail x="64" y="-48"/></transition><transition><source ref="id4"/><target ref="id3"/><label kind="guard" x="128" y="24">dir == 1 &amp;&amp;
x+leng &lt; 6 &amp;&amp;
grid[x+leng][y] == 0</label><label kind="assignment" x="112" y="0">moveRight()</label><nail x="120" y="24"/><nail x="192" y="24"/></transition><transition><source ref="id4"/><target ref="id3"/><label kind="guard" x="128" y="-40">dir == 1 &amp;&amp;
x-1 &gt;= 0 &amp;&amp;
grid[x-1][y] == 0</label><label kind="assignment" x="128" y="-56">moveLeft()</label><nail x="128" y="-32"/><nail x="200" y="-32"/></transition><transition><source ref="id4"/><target ref="id3"/><label kind="guard" x="128" y="104">dir == 0 &amp;&amp;
y-1 &gt;= 0 &amp;&amp; 
grid[x][y-1] == 0</label><label kind="assignment" x="120" y="80">moveDown()</label><nail x="96" y="104"/><nail x="216" y="104"/></transition><transition><source ref="id4"/><target ref="id3"/><label kind="guard" x="120" y="-104">dir == 0 &amp;&amp;
y+leng &lt; 6 &amp;&amp; 
grid[x][y+leng] == 0</label><label kind="assignment" x="128" y="-120">moveUp()</label><nail x="96" y="-96"/><nail x="216" y="-96"/></transition><transition><source ref="id6"/><target ref="id5"/><label kind="guard" x="-328" y="-24">gameCreated == true</label></transition></template><template><name>Player</name><parameter>int x</parameter><declaration>void create()
{
	grid[x][3] = 2;
	grid[x+1][3] = 2;


	vehicles = vehicles+1;
	if(vehicles == 6)
		playersCreated = true;
}

void moveLeft()
{
	if((grid[x-1][3] == 0) &amp;&amp; (x-1 &gt;= 0))
	{
		int tempX = x-1;
		grid[x-1][3] = 2;
		grid[x+1][3] = 0;
		x = tempX;
	}
}

void moveRight()
{
	if((grid[x+2][3] == 0) &amp;&amp; (x+2 &lt; 6))
	{
		int tempX = x+1;
		grid[x+2][3] = 2;
		grid[x][3] = 0;
		x = tempX;
	}
}

bool playerWin()
{
	if(x == 4)
		return true;
	else
		return false;
}
</declaration><location id="id7" x="-488" y="0"></location><location id="id8" x="112" y="0"></location><location id="id9" x="-56" y="0"></location><location id="id10" x="-256" y="0"></location><location id="id11" x="-624" y="0"></location><location id="id12" x="-784" y="0"></location><init ref="id12"/><transition><source ref="id7"/><target ref="id10"/><label kind="guard" x="-456" y="-24">playersCreated == true</label></transition><transition><source ref="id11"/><target ref="id7"/><label kind="assignment" x="-576" y="-24">create()</label></transition><transition><source ref="id9"/><target ref="id8"/><label kind="guard" x="-8" y="-24">playerWin()</label></transition><transition><source ref="id9"/><target ref="id10"/><label kind="guard" x="-224" y="-16">playerWin() == false</label></transition><transition><source ref="id10"/><target ref="id9"/><label kind="guard" x="-208" y="40">x+2 &lt; 6 &amp;&amp;
grid[x+2][3] == 0</label><label kind="assignment" x="-216" y="16">moveRight()</label><nail x="-216" y="40"/><nail x="-144" y="40"/></transition><transition><source ref="id10"/><target ref="id9"/><label kind="guard" x="-216" y="-48">x-1 &gt;= 0 &amp;&amp;
grid[x-1][3] == 0</label><label kind="assignment" x="-208" y="-66">moveLeft()</label><nail x="-208" y="-42"/><nail x="-136" y="-42"/></transition><transition><source ref="id12"/><target ref="id11"/><label kind="guard" x="-768" y="-24">gameCreated == true</label></transition></template><system>// Place template instantiations here.
game = Game();
veh1 = Vehicle(0,5,1,2);
veh2 = Vehicle(0,2,0,3);
veh3 = Vehicle(2,4,0,2);
veh4 = Vehicle(1,2,1,3);
veh5 = Vehicle(3,0,1,3);
player = Player(1);

// List one or more processes to be composed into a system.
system game, veh1, veh2, veh3, veh4, veh5, player;</system></nta>