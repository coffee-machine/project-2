<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>int grid[6][6];
bool gameCreated = false;
bool playersCreated = false;
int vehNum = 0;
int vehicles = 0;
int steps = 0;

</declaration>
	<template>
		<name x="5" y="5">Game</name>
		<parameter>int vehs</parameter>
		<declaration>void initialize()
{
	int i;
	int j;
    vehNum = vehs;
	for(i = 0; i &lt; 6; i++)
		for(j = 0; j &lt; 6; j++)
			grid[i][j] = 0;

	gameCreated = true;
}</declaration>
		<location id="id0" x="127" y="-42">
		</location>
		<location id="id1" x="8" y="-42">
			<name x="-8" y="-76">Begin</name>
			<committed/>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="assignment" x="40" y="-64">initialize()</label>
		</transition>
	</template>
	<template>
		<name>Vehicle</name>
		<parameter>int x, int y, int dir, int leng</parameter>
		<declaration>void moveUp()
{
	int tempY = y+1;
	grid[x][y+leng] = 1;
	grid[x][y] = 0;
	y = tempY;
	steps = steps+1;
}

bool checkUp()
{
	if(dir == 0 &amp;&amp; y+leng &lt; 6 &amp;&amp; grid[x][y+leng] == 0)
		return true;
	else
		return false;
}

void moveDown()
{
	int tempY = y-1;
	grid[x][y-1] = 1;
	grid[x][tempY+leng] = 0;
	y = tempY;
	steps = steps+1;
}

bool checkDown()
{
	if(dir == 0 &amp;&amp; y-1 &gt;= 0 &amp;&amp; grid[x][y-1] == 0)
		return true;
	else
		return false;
}

void moveLeft()
{
	int tempX = x-1;
	grid[x-1][y] = 1;
	grid[tempX+leng][y] = 0;
	x = tempX;
	steps = steps+1;
}

bool checkLeft()
{
	if(dir == 1 &amp;&amp; x-1 &gt;= 0 &amp;&amp; grid[x-1][y] == 0)
		return true;
	else
		return false;
}

void moveRight()
{
	int tempX = x+1;
	grid[x+leng][y] = 1;
	grid[x][y] = 0;
	x = tempX;
	steps = steps+1;
}

bool checkRight()
{
	if(dir == 1 &amp;&amp; x+leng &lt; 6 &amp;&amp; grid[x+leng][y] == 0)
		return true;
	else
		return false;
}

void create()
{
	int tempLeng;
	grid[x][y] = 1;
	if(dir == 0)
	{
		int tempY = y;
		for(tempLeng = leng; tempLeng &gt; 1; tempLeng--)
		{
			tempY = tempY+1;
			grid[x][tempY] = 1;
		}
	}
	else if(dir == 1)
	{
		int tempX = x;
		for(tempLeng = leng; tempLeng &gt; 1; tempLeng--)
		{
			tempX = tempX+1;
			grid[tempX][y] = 1;
		}
	}

	vehicles = vehicles+1;
	if(vehicles == vehNum)
		playersCreated = true;
}</declaration>
		<location id="id2" x="-128" y="0">
			<name x="-161" y="-42">Initialization</name>
			<committed/>
		</location>
		<location id="id3" x="306" y="0">
			<name x="323" y="-8">FinishMove</name>
			<committed/>
		</location>
		<location id="id4" x="68" y="0">
			<name x="-25" y="8">PerformMove</name>
		</location>
		<location id="id5" x="-323" y="0">
			<name x="-357" y="-42">GameStart</name>
			<committed/>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="comments" x="127" y="-25">checks for moves</label>
			<nail x="204" y="0"/>
			<nail x="119" y="0"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-104" y="-24">playersCreated == true</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="144" y="68">checkRight()</label>
			<label kind="assignment" x="144" y="42">moveRight()</label>
			<nail x="119" y="68"/>
			<nail x="247" y="68"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="144" y="-68">checkLeft()</label>
			<label kind="assignment" x="144" y="-93">moveLeft()</label>
			<nail x="119" y="-68"/>
			<nail x="246" y="-68"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="145" y="121">checkDown()</label>
			<label kind="assignment" x="145" y="95">moveDown()</label>
			<nail x="68" y="119"/>
			<nail x="306" y="119"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="144" y="-119">checkUp()</label>
			<label kind="assignment" x="144" y="-144">moveUp()</label>
			<nail x="68" y="-119"/>
			<nail x="306" y="-119"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id2"/>
			<label kind="guard" x="-297" y="-25">gameCreated == true</label>
			<label kind="assignment" x="-255" y="0">create()</label>
			<nail x="-178" y="0"/>
		</transition>
	</template>
	<template>
		<name>Player</name>
		<parameter>int x</parameter>
		<declaration>void create()
{
	grid[x][3] = 2;
	grid[x+1][3] = 2;


	vehicles = vehicles+1;
	if(vehicles == vehNum)
		playersCreated = true;
}

void moveLeft()
{
	int tempX = x-1;
	grid[x-1][3] = 2;
	grid[x+1][3] = 0;
	x = tempX;
	steps = steps+1;
}

bool checkLeft()
{
	if(x-1 &gt;= 0 &amp;&amp; grid[x-1][3] == 0)
		return true;
	else
		return false;
}

void moveRight()
{
	int tempX = x+1;
	grid[x+2][3] = 2;
	grid[x][3] = 0;
	x = tempX;
	steps = steps+1;
}

bool checkRight()
{
	if(x+2 &lt; 6 &amp;&amp; grid[x+2][3] == 0)
		return true;
	else
		return false;
}
bool playerWin()
{
	if(x == 4)
		return true;
	else
		return false;
}
</declaration>
		<location id="id6" x="-488" y="0">
			<name x="-518" y="-42">Initialization</name>
			<committed/>
		</location>
		<location id="id7" x="-9" y="0" color="#00ff00">
			<name x="-19" y="-34">End</name>
		</location>
		<location id="id8" x="-127" y="0">
			<name x="-118" y="8">CheckWin</name>
			<committed/>
		</location>
		<location id="id9" x="-297" y="0">
			<name x="-390" y="8">PerformMove</name>
		</location>
		<location id="id10" x="-671" y="0">
			<name x="-703" y="-42">GameStart</name>
			<label kind="comments" x="-703" y="25">RED CAR</label>
			<committed/>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id10"/>
			<target ref="id6"/>
			<label kind="guard" x="-654" y="-25">gameCreated == true</label>
			<label kind="assignment" x="-609" y="0">create()</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id9"/>
			<label kind="guard" x="-467" y="-25">playersCreated == true</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-110" y="-25">playerWin()</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="-272" y="-25">playerWin() == false</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="-246" y="68">checkRight()</label>
			<label kind="assignment" x="-246" y="42">moveRight()</label>
			<nail x="-298" y="68"/>
			<nail x="-128" y="68"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="-246" y="-68">checkLeft()</label>
			<label kind="assignment" x="-246" y="-93">moveLeft()</label>
			<nail x="-298" y="-67"/>
			<nail x="-128" y="-67"/>
		</transition>
	</template>
	<system>// Hardest2
game = Game(7);
veh1 = Vehicle(0,5,1,2);
veh2 = Vehicle(2,4,0,2);
veh3 = Vehicle(3,3,0,3);
veh4 = Vehicle(0,2,0,3);
veh5 = Vehicle(1,2,1,3);
veh6 = Vehicle(3,0,1,3);

player = Player(1);

// List one or more processes to be composed into a system.
system game, veh1, veh2, veh3, veh4, veh5, veh6, player;</system>
	<queries>
		<query>
			<formula>E&lt;&gt;(player.playerWin() == true)
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
