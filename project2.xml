<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
//    bool board[6][6] := { {1,1,1,1,1,0},
//                          {0,0,1,0,1,1},
//                          {0,1,1,1,1,1}, 
//                          {1,1,0,1,1,1},
//                          {1,0,0,1,1,1},
//                          {1,1,1,1,1,1}
//                        };

bool board[6][6] := { {1,1,0,0,0,0},
                      {0,0,0,0,0,0},
                      {0,0,0,0,0,0}, 
                      {0,0,0,0,0,0},
                      {0,0,0,0,0,0},
                      {0,0,0,0,0,0}
                    };</declaration>
	<template>
		<name x="5" y="5">Car</name>
		<parameter>int size, int init_x, int init_y, int direction, bool redCar</parameter>
		<declaration>// NOTE ON CAR:
// We assume car's x and y coordinates to be the location of its trunk.

int forth, back, x_location, y_location;

void move(int direction) {
    if (direction == 0) {
        board[x_location][y_location] := 0; // old trunk location is now empty -&gt; 0 x x 0
        board[x_location][y_location + 2] := 1; // new front location full     -&gt; 0 0 x x
        y_location++; // trunk's location updated
    }
    if (direction == 1) {
        board[x_location][y_location] := 0;
        board[x_location + 2][y_location] := 1;
        x_location++;
    }
    if (direction == 2) {
        board[x_location][y_location] := 0;
        board[x_location][y_location - 2] := 1;
        y_location--;
    }
    if (direction == 3) {
        board[x_location][y_location + 1] := 0;
        board[x_location][y_location] := 1;
        board[x_location - 2][y_location] := 1;
        x_location--;
    }
}

bool isOpen(int direction) {
    if (direction == 0) { // NORTH
        if (y_location + 2 &lt;= 5) { // RANGE CHECK
            if (board[x_location][y_location + 2]) {        
                return false;
            } else {
                return true;
            }
            return false;
        }
    }
    if (direction == 1) { // EAST
        if (x_location + 2 &lt;= 5) { // RANGE CHECK
            if (board[x_location + 2][y_location]) {
                return false;
            } else {
                return true;
            }
            return false;
        }
    }
    if (direction == 2) { // SOUTH
        if (y_location - 2 &gt;= 0) { // RANGE CHECK
            if (board[x_location][y_location - 2]) {
                return false;
            } else {
                return true;
            }
            return false;
        }
    }
    if (direction == 3) { // WEST
        if (x_location - 2 &gt;= 0) { // RANGE CHECK
            if (board[x_location - 2][y_location]) {
                return false;
            } else {
                return true;
            }
            return false;
        }
    }
    return false;
}

void initCar() {
    forth := direction;
    x_location := init_x;
    y_location := init_y;
    if (forth &lt;= 1) {
        back := forth + 2;
    } else {
        back := forth - 2;
    }
}</declaration>
		<location id="id0" x="-17" y="144">
		</location>
		<location id="id1" x="-272" y="-144">
			<name x="-323" y="-178">movedBack</name>
		</location>
		<location id="id2" x="221" y="-144">
			<name x="178" y="-178">movedForth</name>
		</location>
		<location id="id3" x="-272" y="0">
		</location>
		<location id="id4" x="221" y="0">
		</location>
		<location id="id5" x="-17" y="0">
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id5"/>
			<label kind="assignment" x="-8" y="76">initCar()</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="assignment" x="-391" y="-76">move(back)</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="assignment" x="229" y="-76">move(forth)</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="guard" x="-204" y="8">isOpen(back)</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="42" y="8">isOpen(forth)</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Car0 = Car(2,0,0,0, false);
//Car1 = Car(2,3,3,1, true);
// List one or more processes to be composed into a system.
system Car0;//, Car1;
    </system>
	<queries>
	</queries>
</nta>
