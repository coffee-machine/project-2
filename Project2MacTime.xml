<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>clock total;
clock time;
int grid[6][6];
bool gameCreated = false;
bool playersCreated = false;
bool waiting = false;
int vehNum = 0;
int vehicles = 0;
int steps = 0;

</declaration>
	<template>
		<name x="5" y="5">Game</name>
		<parameter>int vehs</parameter>
		<declaration>void initialize()
{
	int i;
	int j;
    vehNum = vehs;
	for(i = 0; i &lt; 6; i++)
		for(j = 0; j &lt; 6; j++)
			grid[i][j] = 0;

	gameCreated = true;
}</declaration>
		<location id="id0" x="128" y="-40">
		</location>
		<location id="id1" x="8" y="-42">
			<committed/>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="assignment" x="40" y="-64">initialize()</label>
		</transition>
	</template>
	<template>
		<name>Vehicle</name>
		<parameter>int x, int y, int dir, int leng</parameter>
		<declaration>

void moveUp()
{
	int tempY = y+1;
	grid[x][y+leng] = 1;
	grid[x][y] = 0;
	y = tempY;
	steps = steps+1;

    waiting = true;
}

bool checkUp()
{
	if(dir == 0 &amp;&amp; y+leng &lt; 6 &amp;&amp; grid[x][y+leng] == 0)
		return true;
	else
		return false;
}

void moveDown()
{
	int tempY = y-1;
	grid[x][y-1] = 1;
	grid[x][tempY+leng] = 0;
	y = tempY;
	steps = steps+1;

    waiting = true;
}

bool checkDown()
{
	if(dir == 0 &amp;&amp; y-1 &gt;= 0 &amp;&amp; grid[x][y-1] == 0)
		return true;
	else
		return false;
}

void moveLeft()
{
	int tempX = x-1;
	grid[x-1][y] = 1;
	grid[tempX+leng][y] = 0;
	x = tempX;
	steps = steps+1;

    waiting = true;
}

bool checkLeft()
{
	if(dir == 1 &amp;&amp; x-1 &gt;= 0 &amp;&amp; grid[x-1][y] == 0)
		return true;
	else
		return false;
}

void moveRight()
{
	int tempX = x+1;
	grid[x+leng][y] = 1;
	grid[x][y] = 0;
	x = tempX;
	steps = steps+1;

    waiting = true;
}

bool checkRight()
{
	if(dir == 1 &amp;&amp; x+leng &lt; 6 &amp;&amp; grid[x+leng][y] == 0)
		return true;
	else
		return false;
}

void create()
{
	int tempLeng;
	grid[x][y] = 1;
	if(dir == 0)
	{
		int tempY = y;
		for(tempLeng = leng; tempLeng &gt; 1; tempLeng--)
		{
			tempY = tempY+1;
			grid[x][tempY] = 1;
		}
	}
	else if(dir == 1)
	{
		int tempX = x;
		for(tempLeng = leng; tempLeng &gt; 1; tempLeng--)
		{
			tempX = tempX+1;
			grid[tempX][y] = 1;
		}
	}

	vehicles = vehicles+1;
	if(vehicles == vehNum)
		playersCreated = true;
}</declaration>
		<location id="id2" x="331" y="0">
			<committed/>
		</location>
		<location id="id3" x="-128" y="0">
			<committed/>
		</location>
		<location id="id4" x="216" y="0">
			<label kind="invariant" x="229" y="-17">time &lt;= 2</label>
		</location>
		<location id="id5" x="68" y="0">
		</location>
		<location id="id6" x="-408" y="0">
			<committed/>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="assignment" x="170" y="-178">time = 0,
waiting = false</label>
			<nail x="331" y="-178"/>
			<nail x="51" y="-178"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="221" y="17">leng == 2 &amp;&amp; time &gt;= 2</label>
			<nail x="255" y="17"/>
			<nail x="314" y="17"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="221" y="-42">leng == 3 &amp;&amp; time &gt;= 5</label>
			<nail x="238" y="-17"/>
			<nail x="289" y="-17"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="-104" y="-24">playersCreated == true</label>
			<label kind="assignment" x="-59" y="0">time = 0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="68" y="25">checkRight() &amp;&amp; !waiting</label>
			<label kind="assignment" x="112" y="0">moveRight()</label>
			<nail x="120" y="24"/>
			<nail x="192" y="24"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="68" y="-34">checkLeft() &amp;&amp; !waiting</label>
			<label kind="assignment" x="128" y="-56">moveLeft()</label>
			<nail x="128" y="-32"/>
			<nail x="200" y="-32"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="76" y="102">checkDown() &amp;&amp; !waiting</label>
			<label kind="assignment" x="120" y="80">moveDown()</label>
			<nail x="96" y="104"/>
			<nail x="216" y="104"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="68" y="-93">checkUp() &amp;&amp; !waiting</label>
			<label kind="assignment" x="110" y="-117">moveUp()</label>
			<nail x="78" y="-93"/>
			<nail x="198" y="-93"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="guard" x="-331" y="-25">gameCreated == true</label>
			<label kind="assignment" x="-289" y="0">create()</label>
			<nail x="-178" y="0"/>
		</transition>
	</template>
	<template>
		<name>Player</name>
		<parameter>int x</parameter>
		<declaration>void create()
{
	grid[x][3] = 2;
	grid[x+1][3] = 2;


	vehicles = vehicles+1;
	if(vehicles == vehNum)
		playersCreated = true;
}

void moveLeft()
{
	int tempX = x-1;
	grid[x-1][3] = 2;
	grid[x+1][3] = 0;
	x = tempX;
	steps = steps+1;

    waiting = true;
}

bool checkLeft()
{
	if(x-1 &gt;= 0 &amp;&amp; grid[x-1][3] == 0)
		return true;
	else
		return false;
}

void moveRight()
{
	int tempX = x+1;
	grid[x+2][3] = 2;
	grid[x][3] = 0;
	x = tempX;
	steps = steps+1;

    waiting = true;
}

bool checkRight()
{
	if(x+2 &lt; 6 &amp;&amp; grid[x+2][3] == 0)
		return true;
	else
		return false;
}
bool playerWin()
{
	if(x == 4)
		return true;
	else
		return false;
}
</declaration>
		<location id="id7" x="25" y="0">
			<committed/>
		</location>
		<location id="id8" x="-488" y="0">
			<committed/>
		</location>
		<location id="id9" x="161" y="0">
		</location>
		<location id="id10" x="-56" y="0">
			<label kind="invariant" x="-68" y="8">time &lt;= 2</label>
		</location>
		<location id="id11" x="-256" y="0">
		</location>
		<location id="id12" x="-784" y="0">
			<committed/>
		</location>
		<init ref="id12"/>
		<transition>
			<source ref="id7"/>
			<target ref="id11"/>
			<label kind="assignment" x="-187" y="93">time = 0,
waiting = false</label>
			<nail x="-93" y="111"/>
			<nail x="-255" y="111"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id9"/>
			<label kind="guard" x="51" y="-25">playerWin()</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id7"/>
			<label kind="guard" x="-42" y="-25">time &gt;= 2</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id8"/>
			<label kind="guard" x="-714" y="-17">gameCreated == true</label>
			<label kind="assignment" x="-671" y="0">create()</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id11"/>
			<label kind="guard" x="-456" y="-24">playersCreated == true</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="guard" x="-238" y="42">checkRight() &amp;&amp; !waiting</label>
			<label kind="assignment" x="-208" y="16">moveRight()</label>
			<nail x="-216" y="40"/>
			<nail x="-144" y="40"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="guard" x="-238" y="-42">checkLeft() &amp;&amp; !waiting</label>
			<label kind="assignment" x="-212" y="-68">moveLeft()</label>
			<nail x="-212" y="-44"/>
			<nail x="-140" y="-44"/>
		</transition>
	</template>
	<system>// Hardest2
game = Game(7);
veh1 = Vehicle(0,5,1,2);
veh2 = Vehicle(2,4,0,2);
veh3 = Vehicle(3,3,0,3);
veh4 = Vehicle(0,2,0,3);
veh5 = Vehicle(1,2,1,3);
veh6 = Vehicle(3,0,1,3);

player = Player(1);

// List one or more processes to be composed into a system.
system game, veh1, veh2, veh3, veh4, veh5, veh6, player;</system>
	<queries>
		<query>
			<formula>E&lt;&gt;(player.x == 4)
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
